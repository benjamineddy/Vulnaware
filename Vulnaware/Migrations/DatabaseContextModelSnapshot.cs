// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using Vulnaware.Data;

namespace Vulnaware.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Vulnaware.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Vulnaware.Models.Configuration", b =>
                {
                    b.Property<int>("ConfigurationID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AspNetUserID");

                    b.Property<string>("ConfigurationName");

                    b.Property<DateTime>("DateAdded");

                    b.Property<string>("Notes");

                    b.HasKey("ConfigurationID");

                    b.HasIndex("AspNetUserID");

                    b.ToTable("Configuration");
                });

            modelBuilder.Entity("Vulnaware.Models.Cve", b =>
                {
                    b.Property<int>("CveID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccessComplexity");

                    b.Property<string>("AccessVector");

                    b.Property<string>("Authentication");

                    b.Property<string>("AvailabilityImpact");

                    b.Property<double>("BaseScore");

                    b.Property<string>("ConfidentialityImpact");

                    b.Property<string>("Description");

                    b.Property<string>("GivenID");

                    b.Property<string>("IntegrityImpact");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<DateTime>("PublishedDate");

                    b.Property<string>("VectorString");

                    b.HasKey("CveID");

                    b.ToTable("Cve");
                });

            modelBuilder.Entity("Vulnaware.Models.CveConfiguration", b =>
                {
                    b.Property<int>("CveID");

                    b.Property<int>("ProductID");

                    b.HasKey("CveID", "ProductID");

                    b.HasIndex("ProductID");

                    b.ToTable("CveConfiguration");
                });

            modelBuilder.Entity("Vulnaware.Models.Cwe", b =>
                {
                    b.Property<int>("CweID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CveID");

                    b.Property<string>("GivenId");

                    b.HasKey("CweID");

                    b.HasIndex("CveID");

                    b.ToTable("Cwe");
                });

            modelBuilder.Entity("Vulnaware.Models.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Added");

                    b.Property<string>("Concatenated");

                    b.Property<string>("Edition");

                    b.Property<string>("Part");

                    b.Property<string>("ProductLanguage");

                    b.Property<string>("ProductName");

                    b.Property<string>("ProductUpdate");

                    b.Property<string>("Vendor");

                    b.Property<string>("Version");

                    b.HasKey("ProductID");

                    b.HasIndex("Concatenated")
                        .IsUnique()
                        .HasFilter("[Concatenated] IS NOT NULL");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Vulnaware.Models.Reference", b =>
                {
                    b.Property<int>("ReferenceID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CveID");

                    b.Property<string>("Url");

                    b.HasKey("ReferenceID");

                    b.HasIndex("CveID");

                    b.ToTable("Reference");
                });

            modelBuilder.Entity("Vulnaware.Models.Status", b =>
                {
                    b.Property<int>("StatusID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("StatusName");

                    b.HasKey("StatusID");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("Vulnaware.Models.TrackedCve", b =>
                {
                    b.Property<string>("AspNetUserID");

                    b.Property<int>("CveID");

                    b.Property<string>("Notes");

                    b.HasKey("AspNetUserID", "CveID");

                    b.HasIndex("CveID");

                    b.ToTable("TrackedCve");
                });

            modelBuilder.Entity("Vulnaware.Models.UserCveConfiguration", b =>
                {
                    b.Property<int>("ConfigurationID");

                    b.Property<int>("ProductID");

                    b.Property<int>("CveID");

                    b.Property<DateTime>("DateAdded");

                    b.Property<string>("New");

                    b.Property<string>("Notes");

                    b.Property<int>("StatusID");

                    b.HasKey("ConfigurationID", "ProductID", "CveID");

                    b.HasIndex("CveID");

                    b.HasIndex("ProductID");

                    b.HasIndex("StatusID");

                    b.ToTable("UserCveConfiguration");
                });

            modelBuilder.Entity("Vulnaware.Models.UserPreference", b =>
                {
                    b.Property<int>("UserPreferenceId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId");

                    b.Property<string>("EmailNotification");

                    b.HasKey("UserPreferenceId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("UserPreference");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Vulnaware.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Vulnaware.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Vulnaware.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Vulnaware.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Vulnaware.Models.Configuration", b =>
                {
                    b.HasOne("Vulnaware.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Configurations")
                        .HasForeignKey("AspNetUserID");
                });

            modelBuilder.Entity("Vulnaware.Models.CveConfiguration", b =>
                {
                    b.HasOne("Vulnaware.Models.Cve", "Cve")
                        .WithMany("CveConfigurations")
                        .HasForeignKey("CveID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Vulnaware.Models.Product", "Product")
                        .WithMany("CveConfigurations")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Vulnaware.Models.Cwe", b =>
                {
                    b.HasOne("Vulnaware.Models.Cve", "Cve")
                        .WithMany("Cwes")
                        .HasForeignKey("CveID");
                });

            modelBuilder.Entity("Vulnaware.Models.Reference", b =>
                {
                    b.HasOne("Vulnaware.Models.Cve", "Cve")
                        .WithMany("References")
                        .HasForeignKey("CveID");
                });

            modelBuilder.Entity("Vulnaware.Models.TrackedCve", b =>
                {
                    b.HasOne("Vulnaware.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("TrackedCves")
                        .HasForeignKey("AspNetUserID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Vulnaware.Models.Cve", "Cve")
                        .WithMany("TrackedCves")
                        .HasForeignKey("CveID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Vulnaware.Models.UserCveConfiguration", b =>
                {
                    b.HasOne("Vulnaware.Models.Configuration", "Configuration")
                        .WithMany("UserCveConfigurations")
                        .HasForeignKey("ConfigurationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Vulnaware.Models.Cve", "Cve")
                        .WithMany("UserCveConfigurations")
                        .HasForeignKey("CveID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Vulnaware.Models.Product", "Product")
                        .WithMany("UserCveConfigurations")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Vulnaware.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Vulnaware.Models.UserPreference", b =>
                {
                    b.HasOne("Vulnaware.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("UserPreferences")
                        .HasForeignKey("ApplicationUserId");
                });
#pragma warning restore 612, 618
        }
    }
}
