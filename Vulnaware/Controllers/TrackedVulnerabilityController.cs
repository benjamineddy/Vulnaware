using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Vulnaware.Data;
using Vulnaware.Models;

namespace Vulnaware.Controllers
{
    [Authorize]
    public class TrackedVulnerabilityController : Controller
    {
        private readonly DatabaseContext _context;
        private readonly UserManager<ApplicationUser> _userManager;

        public TrackedVulnerabilityController(DatabaseContext context, UserManager<ApplicationUser> userManager)
        {
            _context = context;
            _userManager = userManager;
        }

        public IActionResult Index()
        {
            var userEntity = _context.Users.Where(u => u.Id == _userManager.GetUserId(User))
                .Include(ue => ue.TrackedCves)
                .ThenInclude(tc => tc.Cve).FirstOrDefault(); ;

            if (userEntity == null)
            {
                return NotFound();
            }


            return View(userEntity);
        }

        public IActionResult Details(int cveID)
        {
            string userID = _userManager.GetUserId(User);

            if (userID == null || cveID == 0)
            {
                return NotFound();
            }

            try
            {
                TrackedCve existingTrackedCve = _context.TrackedCves
                    .Where(etc => etc.AspNetUserID == userID
                        && etc.CveID == cveID)
                        .Include(etc => etc.Cve)
                        .ThenInclude(c => c.CveConfigurations)
                        .ThenInclude(etc => etc.Product)
                        .Include(etc => etc.Cve)
                        .ThenInclude(c => c.References)
                        .FirstOrDefault();

                return View(existingTrackedCve);
            }
            catch (Exception)
            {
                return NotFound();
            }
         
        }

        [HttpPost]
        public StatusCodeResult UpdateTrackedVulnerability(string notes, int cveId)
        {
            // Check for nulls and 0's
            if (notes == null || cveId == 0)
            {
                return NotFound();
            }

            // get the existingTrackedCve
            try
            {
                TrackedCve existingTrackedCve = _context.TrackedCves
                    .Where(etc => etc.AspNetUserID == _userManager.GetUserId(User)
                        && etc.CveID == cveId)
                        .FirstOrDefault();

                // return if null
                if (existingTrackedCve == null)
                {
                    return NotFound();
                }

                // If notes have changed apply the changes
                if (existingTrackedCve.Notes != notes)
                {
                    existingTrackedCve.Notes = notes;
                    _context.TrackedCves.Update(existingTrackedCve);
                    _context.SaveChanges();
                    return Ok();
                } else
                {
                    return Ok();
                }

            }
            catch (Exception)
            {
                return NotFound();
            }
        }

        [HttpPost]
        public IActionResult RemoveTrackedVulnerability(int cveId)
        {
            // Get the tracked vulnerability
            var existingTrackedVulnerability = _context.TrackedCves
                .Where(tc => tc.CveID == cveId
                    && tc.AspNetUserID == _userManager.GetUserId(User)).FirstOrDefault();

            // Remove the vulnerability
            try
            {
                _context.TrackedCves.Remove(existingTrackedVulnerability);
                _context.SaveChanges();
                return Ok();
            }
            catch (Exception e)
            {
                TempData["Param"] = "Changing Tracking";
                TempData["Error"] = e.Message;
                throw e;
            }
        }
    }
}